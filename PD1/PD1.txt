1. Functional Requirements
    - Event Creation: Ability for users to create tasks/events with title, description, date, time, and reminder options.
    - Event Management: Ability to edit, delete, or mark events as completed.
    - Event categories: Assign an event to categories(Personal, work, etc.).
    - Calendar View: A visual calander representation of all events.
    - Reminders: Ability to set reminders via pop-ups, email, or sms.
    - Recurring Events: Ability to set tasks that recur daily/weekely/monthly/yearly
    - Data export: Ability to export event data to external formats such as CSV.
    - Data import/merge: Ability to import a file, and merge the file's events with your events. For team collaboration/planning purposes.
    - Security: Implement security measures to protect sensitive data, such as encryption and secure storage of passwords.


2. Non-Functional Requirements  
    - Performance: The application should be responsive and efficiently handle large amounts of data.
    - User Experience/Usability: The application should have a user-friendly interface, with clear navigation and intuitive controls.
    - Compatibility: The application should be compatible with multiple operating systems, such as Windows, macOS, and Linux.
    - Scalability: The application should be designed to scale to accommodate increasing numbers of users and tasks/events.
    - Reliability: The application should be designed to minimize downtime and ensure data integrity and consistency.
    - Maintainability: The code should be well-documented, maintainable, and easily extensible for future updates and features.
    - Security: The application should be secure against potential threats such as data breaches, unauthorized access, and malware attacks.
    - Accessibility: The application should be accessible to users with disabilities and comply with relevant accessibility standards.
    - Compliance: The application should comply with relevant regulations and standards, such as data privacy laws and industry-specific standards.

3. Data Dictionary
    - Data Dictionary.csv

4. Initial User Interface Mockups
    



5 Initial Use Case Model
 a. Use Case Diagram
    Steps:
        1. Identify the actors: The actors in this case can be individual users, teams, and managers.
        2. Identify the use cases: Personal task management, Team project management, Event planning, Meeting management, Task delegation.
        3. Draw the diagram: Use case diagrams are usually created using UML (Unified Modeling Language) notation. Start by drawing a rounded rectangle representing the system, then draw arrows to represent the interactions between the system and the actors. Each use case can be represented as an oval with the name of the use case inside it.
        4. Connect actors and use cases: Connect the actors to the relevant use cases with lines to indicate their interactions. For example, an individual user can interact with the personal task management use case, and a team can interact with the team project management use case.


 b. Use Case Descriptions
        - Personal task management: 
            A user can create, edit, and track their personal to-do tasks, set due dates and reminders, categorize and prioritize them for better organization.
        

6. Project Plan
 a. Work Breakdown Structure (WBS)
 b. Gantt chart


