1. Task Management
	1.1 Create task
	1.2 Modify task
	1.3 Delete task
	1.4 Categorize task
	1.5 Set due date for task
	1.6 Set reminder for task
	1.7 Mark task as Complete
	1.8 Assign color to task
	1.9 Set priority of task
2. Task Viewing
	2.1 Weekly view
	2.2 Calendar view
	2.3 Filter Tasks by category
	2.4 Filter Tasks by priority
3. Calendar Objects
	3.1 Export Calendar
	3.2 Import Calendar
	3.3 Merge Calendar
	3.4 Manage Calendar List
4. Security
    4.1 User Data encryption
    4.2 Exported files Password protection
    4.3 Exported files encryption
    4.4 Password protected task list


1. Functional Requirements
    - Task Creation: Ability for users to create tasks with title, description, date, time, category, color, priority, and reminder options.
        - Option should be indicated with some type of plus symbol, and available on both the Weekly and Monthly views
   
    - Task Management: Ability to edit, delete, or mark tasks as completed.
        - Completed tasks are removed from the main list, and sent to a 'completed' category, where the user can un-complete the task, or even look back at the tasks they've accomplished 
    
    - Task categories: Assign a task to categories(Personal/work or user defined categories).
        - Users can define their own categories
        - Users can assign color's to categories to differentiate the tasks withing the weekly/calendar views.
            - Can pick from a predetermined list of colors, or define their own colors with hex values.
   
    - Weekly view: Users can quickly see a list of their tasks for the current week. This will likely be the homepage users see when opening the app
        - From this screen users can:
            - mark tasks as completed via some form of check box
            - Tap on the task card to open a page with all the tasks information
                - This page should allow the user to modify or delete the task as needed and save when complete
            - Tap on the '...' button in the task card to display small menu(possibly a radial menu) with the following options:
                - Change category(Drop-down list)
                - Delete
                - Modify, etc.
            - Cycle through upcoming weeks, where the list of task cards will update to the tasks for the selected week.
        - Task cards should include: task name, completion status, priority, category/color, and time of task if applicable.
        
    - Calendar View: A visual calendar representation of all events.
        - The boxes for every given day should have some sort of visual input indicating the number of tasks for the day, as well as the the color of the category.
        - User should be able to filter tasks by category and/or priority.
        - User can tap on a day to bring up the tasks for that day

    - Reminders: Ability to set reminders via pop-ups, email, or sms.
        - Users have the option to select the notification type. This could be implemented in a user's settings page

    - User settings:
        - General user defined preferences including: Notification preferences, light/dark mode, method for exporting items.
    
    - Data export: Ability to export task data to external formats such as CSV.
        - Exported data could be saved locally, or sent to the user's inbox to be shared. [Not really sure how saving files works for mobile devices.]
        - Should include an option to password protect exported files, to further increase security.
            - User should be prompted to enter the password upon importing the file
        - Exported files must not be readable in plain-text, nor should they be modifiable

    - Data import/merge: Ability to import a file, and merge the file's events with your events. For team collaboration/planning purposes.
        - Application should have the ability to overlap separate task lists, so that multiple users with the app can coordinate times they're free
        - This ability would mean the user should be able to have separate calendar instances, and the users personal calendar's data should not be modified in this process.
            - Should have some sort of merged view functionality
            - List of calendar 'objects' that the user can open/close.
                - i.e. personal task calendar vs a calendar with the teams upcoming tasks.
            - Imported calendar objects will be saved locally within the users calendar list
            
    - Merge view
        - User should be able to select 2 or more calendar objects to overlap/merge.
        - Could possibly have several options based on the selected calendars, such as the ability to generate a list of possible free times

    - Security: Implement security measures to protect sensitive data, such as encryption and secure storage of user data.
        - Any physical data that will be stored locally should be encrypted.
        - Source code shouldn't store any private keys in plain text, or any sensitive data for that matter.



2. Non-Functional Requirements  
    - Performance: The application should be responsive and efficiently handle large amounts of data.
        - Should be able to transition between different screens smoothly, without stuttering.
        - System should be able to load user data quickly, we aim to keep load times to a maximum of less than ~3-4 seconds, since we are only handling a single users data stored locally.
    
    - User Experience/Usability: The application should have a user-friendly interface, with clear navigation and intuitive controls.
        - Any controls using icons should be generally understandable to anyone using it for the first time, i.e. a plus icon generally means to add or create data

    - Compatibility: The application should be compatible with multiple operating systems and device types.
        - Should support both IOS and Android platforms 
        - The UI should appear the same across different devices with different screen sizes
    
    - Reliability: The application should be designed to minimize downtime and ensure data integrity and consistency.
        - For our case, the data should be stored locally. The lack of networking capabilities should alleviate any accessability concerns

    - Maintainability: The code should be well-documented, maintainable, and easily extensible for future updates and features.
        - Code should have comments describing what each section does
        - Code should be readable, and easy to understand
        - Additional documentation explaining the different functionalities available to users should be kept. 

    - Security: The application should be secure against potential threats such as data breaches, unauthorized access, and malware attacks.
        - Any user data, i.e. passwords, task details, etc., stored locally should be encrypted by some secure algorithm that's TBD.
        - Exported files should get the same treatment, and should be automatically decrypted by the application when imported.
        - Application should implement password protection for user defined sensitive data, i.e. a 'my eyes only' section of tasks.

    - Accessibility: The application should be accessible to users with disabilities and comply with relevant accessibility standards.
        - The lack of remotely stored data should alleviate any accessability concerns.
        - Application should provide a optional 'tutorial' feature for users, to assist new friends to the app.
        - UI should aim to make the application accessible to those with various disabilities, including the ability to:
            - Modify the size of text, zoom in/out, choose from multiple font options, as well as the color choices and contrast levels.

    - Compliance: The application should comply with relevant regulations and standards, such as data privacy laws and industry-specific standards.

3. Data Dictionary
    - Data Dictionary.csv

4. Initial User Interface Mockups




5 Initial Use Case Model
 a. Use Case Diagram
    
 b. Use Case Descriptions
        
        

6. Project Plan
 a. Work Breakdown Structure (WBS)
 b. Gantt chart


